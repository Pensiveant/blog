{"version":3,"sources":["blog/img/settings.png","blog/img/githubpages.png","App.tsx","reportWebVitals.ts","index.tsx","App.less","blog/GitHub pages.md"],"names":["App","useEffect","document","querySelectorAll","forEach","block","hljs","highlightBlock","e","console","log","className","styles","app","blogWrap","dangerouslySetInnerHTML","__html","testMark","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports","___HTML_LOADER_GET_SOURCE_FROM_IMPORT___","___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","code"],"mappings":"kHAAA,OAAe,cAA0B,sC,gCCAzC,OAAe,cAA0B,yC,kJC0B1BA,MApBf,WASE,OAPAC,qBAAU,WACRC,SAASC,iBAAiB,YAAYC,SAAQ,SAAAC,GAC5C,IAAMC,IAAKC,eAAeF,GAC1B,MAAOG,GAAKC,QAAQC,IAAIF,SAEzB,IAGD,qBAAKG,UAAWC,IAAOC,IAAvB,SACE,qBAAKF,UAAWC,IAAOE,SACrBC,wBAAyB,CAAEC,OAAQC,UCJ5BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,K,kBCfAa,EAAOC,QAAU,CAAC,IAAM,aAAa,SAAW,oB,kBCAhD,IAAIC,EAA2C,EAAQ,IACnDC,EAA6B,EAAQ,IACrCC,EAA6B,EAAQ,IAIrCC,EAAO,2lIAF2BH,EAAyCC,GAE6lD,uOADtoDD,EAAyCE,GAC4uD,y3EAE3zDJ,EAAOC,QAAUI,I","file":"static/js/main.d83381d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/settings.96f92d5b.png\";","export default __webpack_public_path__ + \"static/media/githubpages.269b9686.png\";","import React, { useEffect } from 'react';\nimport styles from './App.less';\nimport testMark from './blog/GitHub pages.md';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nfunction App() {\n\n  useEffect(() => {\n    document.querySelectorAll(\"pre code\").forEach(block => {\n      try { hljs.highlightBlock(block as any); }\n      catch (e) { console.log(e); }\n    });\n  }, [])\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.blogWrap}\n        dangerouslySetInnerHTML={{ __html: testMark }}\n      >\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app__1-JCt\",\"blogWrap\":\"blogWrap__37M8J\"};","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./img/settings.png\");\nvar ___HTML_LOADER_IMPORT_1___ = require(\"./img/githubpages.png\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \"<h1 id=\\\"github-pages\\\">GitHub pages</h1> <hr> <h2 id=\\\"什么是github-pages？\\\">什么是GitHub Pages？</h2> <p>GitHub Pages是一个静态站点服务，可以直接展示github仓库中的静态文件即HTML、CSS、JavaScript文件。静态文件的产生，提供了可选的自动打包。</p> <p>站点的域名默认为<code>github.io</code>，也可以自定义域名。</p> <hr> <h2 id=\\\"github-pages站点类型\\\">GitHub Pages站点类型</h2> <p>有三种类型的GitHub Pages站点：项目级、用户级以及组织级。项目级与github上的特定项目相关联，用户以及组织级和特定账号相关联。</p> <p>发布用户级站点，必须创建一个名为<code>&lt;username&gt;.github.io</code>的仓库，<code>&lt;username&gt;</code>为你对应的github用户名。发布组织级站点，必须创建一个名为<code>&lt;organization&gt;.github.io</code>，<code>&lt;organization&gt;</code>为你对应的github用户名。除非你自定义了域名，用户级站点和组织级站点可以通过以下对应的网址进行访问<code>http(s)://&lt;username&gt;.github.io</code>和<code>http(s)://&lt;organization&gt;.github.io</code>。</p> <p>项目级站点的源文件和该项目存储在同一个仓库下。在没有自定义域名时，可以<code>http(s)://&lt;username&gt;.github.io/&lt;repository&gt;</code>或<code>http(s)://&lt;organization&gt;.github.io/&lt;repository&gt;</code></p> <p>如果你私下发布你的网站，你的网站的网址会有所不同。</p> <blockquote> <p><strong>自定义域名</strong></p> </blockquote> <p>需要你自己现有一个域名，然后在仓库设置中进行设置。</p> <hr> <h2 id=\\\"github-pages站点的发布源\\\">GitHub Pages站点的发布源</h2> <p>GitHub Pages站点的发布源为分支中对应文件夹存储的源文件。</p> <blockquote> <p><strong>默认发布源</strong></p> </blockquote> <p>如果仓库存在默认发布源，GitHub Pages会自动将该发布源发布为站点。</p> <p><strong>用户和组织站点：</strong></p> <p>用户和组织站点的默认发布源是存储库默认分支的根目录(<code>/(root)</code>)。</p> <p><strong>项目站点：</strong></p> <p><strong>项目站点</strong>的默认发布源为<code>gh-pages</code>分支的根目录（<code>/(root)</code>）。</p> <blockquote> <p><strong>修改发布源</strong></p> </blockquote> <p>你也可以修改默认行为，将任意分支的根目录（<code>/(root)</code>）或<code>/docs</code>目录作为发布源。</p> <p>具体操作为：</p> <ol> <li>进入仓库的设置界面：点击仓库名称，然后点击Settings。</li> </ol> <p><img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" alt=\\\"img\\\"></p> <ol start=\\\"2\\\"> <li>找到对应的<code>GitHub Pages</code>设置，选择对应的分支以及文件夹，保存即可。 <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"img\\\"></li> </ol> <p>如果你将任何分支的<code>/docs</code>目录作为发布源， GitHub Pages会读取<code>/docs</code>目录下的所有内容（包括CNAM文件），并将其发布成站点。</p> <p>实际操作时，在根目录下创建<code>docs</code>目录，并将站点源码存放在该目录，推送到远程仓库即可。</p> <hr> <h2 id=\\\"静态站点生成器\\\">静态站点生成器</h2> <p>GitHub Pages会将发布源中的静态文件发布成站点即网站。这些静态文件你可以自己生成，并推送到发布源对应的分支。也可以使用GitHub提供的<strong>静态站点生成器</strong>自动生成。</p> <p>Github 默认使用<code>Jekyll</code>来自动打包。如果需要关闭自动打包，可以在发布源根目录下创建一个空的<code>.nojekyll</code>文件即可。</p> <blockquote> <p><strong>自动打包配置</strong></p> </blockquote> <hr> <h2 id=\\\"github-pages使用指南\\\">Github Pages使用指南</h2> <blockquote> <p><strong>使用限制</strong></p> </blockquote> <p>GitHub Pages的站点有以下限制：</p> <ul> <li>GitHub页面源存储库的建议限制为1GB。</li> <li>已发布的GitHub页面站点不能大于1 GB</li> <li>GitHub页面站点的带宽限制为每月100GB</li> <li>GitHub页面站点每小时不超过10个构建的限制</li> </ul> <h2 id=\\\"参考\\\">参考</h2> <ul> <li><a href=\\\"https://docs.github.com/en/github/working-with-github-pages/getting-started-with-github-pages\\\">en-GitHub Docs-Getting started with GitHub Pages </a></li> </ul> \";\n// Exports\nmodule.exports = code;"],"sourceRoot":""}